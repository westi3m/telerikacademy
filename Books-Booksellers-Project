Author.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PEproject
{
    public class Author
    {
        private string firstName;
        private string lastName;

        public Author(string firstName, string lastName)
        {
            this.firstName = firstName;
            this.lastName = lastName;
        }
        public Author(string name)
        {
            this.firstName = "";
            this.lastName = name;
        }

        public string GetFirstName()
        {
            return this.firstName;
        }
        public string GetLastName()
        {
            return this.lastName;
        }

        public void SetFirstName(string name)
        {
            while (name.Length < 1)
            {
                Console.Write("Enter first name:");
                name = Console.ReadLine();
            } this.firstName = name;
        }
        public void SetLastName(string name)
        {
            while (name.Length < 1)
            {
                Console.Write("Enter last name:");
                name = Console.ReadLine();
            }
            this.lastName = name;
        }

        public override string ToString()
        {
            return this.firstName + " " + this.lastName;
        }
    }
}

Book.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.RegularExpressions;

namespace PEproject
{
    public class Book
    {
        private string title = "";
        private List<Author> authors = new List<Author>();
        private int edition = 0;
        private string ISBN = "";
        private DateTime publishDate = DateTime.Now;
        private decimal price = 0.0m;

        public Book()
        {
            string title;
            do
            {
                Console.Write("Enter book title:");
                title = Console.ReadLine();
            }
            while (title.Length <= 0);
            this.title = title;
            bool hasMoreAuthors = true;
            while (authors.Count < 1 || hasMoreAuthors)
            {
                Console.WriteLine("Enter author(at least one autor / empty line to stop).");
                Console.Write("First name:");
                string firstName = Console.ReadLine();
                if (firstName.Length == 0)
                {
                    hasMoreAuthors = false;
                    continue;
                }
                Console.Write("Last name:");
                string lastName = Console.ReadLine();
                if (lastName.Length == 0)
                {
                    hasMoreAuthors = false;
                    continue;
                }
                else
                {
                    authors.Add(new Author(firstName, lastName));
                    hasMoreAuthors = true;
                }
            }
            int edition;
            do
            {
                Console.Write("Enter edition:");
            } while (!(int.TryParse(Console.ReadLine(), out edition)) || edition < 1);
            this.edition = edition;
            string ISBN;
            do
            {
                Console.Write("Enter book ISBN:");
                ISBN = Console.ReadLine();
            }
            while (ISBN.Length <= 0);
            this.ISBN = ISBN;
            this.publishDate = DateTime.Now;
            decimal price;
            do
            {
                Console.Write("Enter price:");
            } while (!(decimal.TryParse(Console.ReadLine(), out price)) || price < 0);
            this.price = price;
        }
        public Book(string title, List<Author> authors, int edition, string ISBN, DateTime publishDate, decimal price)
        {
            this.title = title;
            this.authors = authors;
            if (edition > 0)
            {
                this.edition = edition;
            }
            else
            {
                edition = 1;
            }
            this.ISBN = ISBN;
            this.publishDate = publishDate;
            if (price > 0)
            {
                this.price = price;
            }
            else
            {
                this.price = 0.0M;
            }
        }
        public Book(string title, Author author, int edition, string ISBN, DateTime publishDate, decimal price)
        {
            this.title = title;
            this.authors.Add(author);
            if (edition > 0)
            {
                this.edition = edition;
            }
            else
            {
                edition = 1;
            }
            this.ISBN = ISBN;
            this.publishDate = publishDate;
            if (price > 0)
            {
                this.price = price;
            }
            else
            {
                this.price = 0.0M;
            }
        }
        public Book(string title, List<Author> authors, string ISBN, DateTime publishDate)
        {
            this.title = title;
            this.authors = authors;
            this.edition = 1;
            this.ISBN = ISBN;
            this.publishDate = publishDate;
            this.price = 0.0M;
        }
        public Book(string title, Author author, string ISBN, DateTime publishDate)
        {
            this.title = title;
            this.authors.Add(author);
            this.edition = 1;
            this.ISBN = ISBN;
            this.publishDate = publishDate;
            this.price = 0.0M;
        }
        public Book(string title, List<Author> authors)
        {
            this.title = title;
            this.authors = authors;
            this.edition = 1;
            this.price = 0.0M;
        }
        public Book(string title, Author author)
        {
            this.title = title;
            this.authors.Add(author);
            this.edition = 1;
            this.price = 0.0M;
        }

        public string GetTitle()
        {
            return this.title;
        }
        public List<Author> GetAuthors()
        {
            return this.authors;
        }
        public Author GetAuthor()
        {
            return this.authors[0];
        }
        public int GetEdition()
        {
            return this.edition;
        }
        public string GetISBN()
        {
            return this.ISBN;
        }
        public DateTime GetPublishDate()
        {
            return this.publishDate;
        }
        public decimal GetPrice()
        {
            return this.price;
        }

        public void SetTitle(string title)
        {
            if (title.Length > 0)
            {
                this.title = title;
            }
            else
            {
                Console.WriteLine("Wrong title format.");
            }
        }
        public void AddAuthor(Author author)
        {
            authors.Add(author);
        }
        public void RemoveAuthor(Author author)
        {
            if (authors.Remove(author))
            {
                Console.WriteLine("Author removed.");
            }
            else
            {
                Console.WriteLine("Author not found.");
            }
        }
        public void SetEdition(int edition)
        {
            if (edition > 0)
            {
                this.edition = edition;
            }
            else
            {
                Console.WriteLine("Wrong format for edition (must be positive integer nubmer).");
            }
        }
        public void SetISBN(string ISBN)
        {
            if (ISBN.Length < 1)
            {
                this.ISBN = ISBN;
            }
            else
            {
                Console.WriteLine("Wrong ISBN.");
            }
        }
        public void SetPublishDate(DateTime publishDate)
        {
            this.publishDate = publishDate;
        }
        public void SetPrice(decimal price)
        {
            if (price >= 0)
            {
                this.price = price;
            }
            else
            {
                do
                {
                    Console.Write("Enter price:");
                } while (!(decimal.TryParse(Console.ReadLine(), out price)) || price < 0);
                this.price = price;
            }
        }

        public override string ToString()
        {
            string stringBook = this.title + " (" + this.edition + " edition)" + " - ";
            foreach (Author author in this.authors)
            {
                if (author.GetFirstName() != null)
                {
                    stringBook += author.GetFirstName() + " ";
                }
                stringBook += author.GetLastName() + ",";
            }
            stringBook += "\nhas ISBN=" + this.ISBN + " and is published on " + this.publishDate + ".";
            stringBook += "\nThe book has price " + this.price + " and is not approved by MON.";
            return stringBook;
        }
    }
}

ApprovedBooks.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PEproject
{
    public class ApprovedBook : Book
    {
        private DateTime approveDate = DateTime.Now;

        public ApprovedBook()
            : base()
        {
            this.approveDate = DateTime.Now;
        }
        public ApprovedBook(DateTime approveDate)
            : base()
        {
            this.approveDate = approveDate;
        }
        public ApprovedBook(string title, List<Author> authors, int edition, string ISBN, DateTime publishDate,decimal price, DateTime approveDate)
            : base(title, authors, edition, ISBN, publishDate,price)
        {
            this.approveDate = approveDate;
        }
        public ApprovedBook(string title, Author author, int edition, string ISBN, DateTime publishDate, decimal price, DateTime approveDate)
            : base(title, author, edition, ISBN, publishDate,price)
        {
            this.approveDate = approveDate;
        }
        public ApprovedBook(string title, List<Author> authors, DateTime approveDate)
            : base(title,authors)
        {
            this.approveDate = approveDate;
        }
        public ApprovedBook(string title, Author author, DateTime approveDate)
            : base(title,author)
        {
            this.approveDate = approveDate;
        }

        public void setApproveDate(DateTime approveDate)
        {
            this.approveDate = approveDate;
        }

        public DateTime getApproveDate()
        {
            return this.approveDate;
        }

        public override string ToString()
        {
            string stringBook = base.GetTitle() + " (" + base.GetEdition() + " edition)" + " - ";
            foreach (Author author in base.GetAuthors())
            {
                if (author.GetFirstName() != null)
                {
                    stringBook += author.GetFirstName() + " ";
                }
                stringBook += author.GetLastName() + ",";
            }
            stringBook += "\nhas ISBN=" + base.GetISBN() + " and is published on " + base.GetPublishDate() + ".";
            stringBook += "\nThe book has price "+base.GetPrice()+" and is approved by MON on " + this.approveDate + ".";
            return stringBook;
        }
    }
}

Booksellers.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PEproject
{
    public class Bookseller
    {
        private string name;
        private string address;
        private string phone;
        private decimal deliveryCost;

        public Bookseller()
        {
            string name;
            do
            {
                Console.Write("Enter name:");
                name = Console.ReadLine();
            }while(name.Length<0);
            this.name = name;
            string address;
            do
            {
                Console.Write("Enter address:");
                address = Console.ReadLine();
            }while(address.Length<0);
            this.address = address;
            string phone;
            do
            {
                Console.Write("Enter phone:");
                phone = Console.ReadLine();
            } while (phone.Length < 0);
            this.phone = phone;
            decimal deliveryCost;
            do
            {
                Console.Write("Enter cost of delivery:");
            } while (!(decimal.TryParse(Console.ReadLine(), out deliveryCost)) || deliveryCost < 0);
            this.deliveryCost = deliveryCost;
        }
        public Bookseller(string name, string address, decimal deliveryCost)
        {
            this.name = name;
            this.address = address;
            this.phone = null;
            this.deliveryCost = deliveryCost;
        }
        public Bookseller(string name, string address, string phone, decimal deliveryCost)
        {
            this.name = name;
            this.address = address;
            this.phone = phone;
            this.deliveryCost = deliveryCost;
        }

        public string GetName()
        {
            return this.name;
        }
        public string GetAddress()
        {
            return this.address;
        }
        public string GetPhone()
        {
            return this.phone;
        }
        public decimal GetDeliveryCost()
        {
            return this.deliveryCost;
        }

        public void SetName(string name)
        {
            while (name.Length < 0)
            {
                Console.Write("Enter name:");
                name = Console.ReadLine();
            }
            this.name = name;
        }
        public void SetAddress(string address)
        {
            while (address.Length < 0)
            {
                Console.Write("Enter address:");
                address = Console.ReadLine();
            } 
            this.address = address;
        }
        public void SetPhone(string phone)
        {
            while (phone.Length < 0)
            {
                Console.Write("Enter phone:");
                phone = Console.ReadLine();
            } 
            this.phone = phone;
        }
        public void SetDeliveryCost(decimal deliveryCost)
        {
            if (deliveryCost >= 0)
            {
                this.deliveryCost = deliveryCost;
            }
            else
            {
                do
                {
                    Console.Write("Enter cost of delivery:");
                } while (!(decimal.TryParse(Console.ReadLine(), out deliveryCost)) || deliveryCost < 0);
                this.deliveryCost = deliveryCost;
            }
        }

        public override string ToString()
        {
            return name + " " + address + "\nPhone-" + phone + " Cost of delivery: " + this.deliveryCost+".";
        }
        public static bool operator ==(Bookseller firstBook, Bookseller secondBook)
        {
            if (firstBook.GetDeliveryCost() == secondBook.GetDeliveryCost())
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public static bool operator !=(Bookseller firstBook, Bookseller secondBook)
        {
            if (firstBook.GetDeliveryCost() != secondBook.GetDeliveryCost())
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}

Program.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace PEproject
{
    class Program
    {
        static List<Book> books = new List<Book>();
        static List<Bookseller> booksellers = new List<Bookseller>();
        static List<ApprovedBook> approvedBooks = new List<ApprovedBook>();

        static void Main(string[] args)
        {
            int choice;
            do
            {
                do
                {
                    Console.Clear();
                    Console.WriteLine("Enter choice:");
                    Console.WriteLine("1. Load books and booksellers from file.");
                    Console.WriteLine("2. Save in file.");
                    Console.WriteLine("3. Add book.");
                    Console.WriteLine("4. Add approved book by MON.");
                    Console.WriteLine("5. Add bookseller.");
                    Console.WriteLine("6. View all not approved books.");
                    Console.WriteLine("7. View all approved books.");
                    Console.WriteLine("8. View all booksellers.");
                    Console.WriteLine("9. Order books for delivery.");
                    Console.WriteLine("10. Exit.");
                } while (!(int.TryParse(Console.ReadLine(), out choice) || (choice < 1 || choice > 10)));
                switch (choice)
                {
                    case 1:
                        {
                            LoadBooks();
                            LoadBooksellers();
                            LoadApprovedBooks();
                            Console.WriteLine("Load successful.");
                            Console.ReadLine();
                            break;
                        }
                    case 2:
                        {
                            SaveBooks();
                            SaveBooksellers();
                            SaveApprovedBooks();
                            Console.WriteLine("Save successful.");
                            Console.ReadLine();
                            break;
                        }
                    case 3: AddBook(); break;
                    case 4: AddApprovedBook(); break;
                    case 5: AddBookseller(); break;
                    case 6: ViewBooks(); break;
                    case 7: ViewApprovedBooks(); break;
                    case 8: ViewBooksellers(); break;
                    case 9: NewDeliveryOrder(); break; 
                    case 10: Console.WriteLine("Bye!"); break;
                    default: Console.WriteLine("Error"); break;
                }
            } while (choice != 10);
        }

        private static void NewDeliveryOrder()
        {
            Bookseller booksellerChosen;
            List<Book> booksOrdered = new List<Book>();
            List<ApprovedBook> approvedBooksOrdered = new List<ApprovedBook>();
            if (booksellers.Count < 1)
            {
                Console.WriteLine("There isnt booksellers. Load from file or add new.");
                Console.ReadLine();
                return;
            }
            else
            {
                booksellerChosen = ChooseBookseller();
                int choice;
                do
                {
                    do
                    {
                        Console.Clear();
                        Console.WriteLine("Enter choice");
                        Console.WriteLine("1. Add new book");
                        Console.WriteLine("2. Add new approved book");
                        Console.WriteLine("3. Complete this delivery");
                        Console.WriteLine("4. Cancel delivery");
                    } while (!(int.TryParse(Console.ReadLine(), out choice)) || choice < 1 || choice > 4);
                    switch (choice)
                    {
                        case 1: //add new book
                            {
                                if (books.Count > 0)
                                {
                                    booksOrdered.Add(AddNewBook());
                                    Console.WriteLine("Book added.");
                                    Console.ReadLine();
                                }
                                else
                                {
                                    Console.WriteLine("There isnt books. Load from file or add new.");
                                    Console.ReadLine();
                                    return;
                                }
                                break;
                            }
                        case 2: // add new approved book
                            {
                                if (approvedBooks.Count > 0)
                                {
                                    approvedBooksOrdered.Add(AddNewApprovedBook());
                                    Console.WriteLine("Book added.");
                                    Console.ReadLine();
                                }
                                else
                                {
                                    Console.WriteLine("There isnt approved books. Load from file or add new.");
                                    Console.ReadLine();
                                    return;
                                }
                                break;
                            }
                        case 3: // Complete this delivery
                            {
                                if (booksOrdered.Count == 0 && approvedBooksOrdered.Count == 0)
                                {
                                    Console.WriteLine("Choose at least one book.");
                                    Console.ReadLine();
                                    choice = 0; // to avoid exit the menu while loop
                                    break;
                                }

                                decimal moneyToPay = 0.0M;
                                Console.WriteLine("Your order from " + booksellerChosen.GetName() + ":");
                                Console.Write(new string('-', 80));
                                moneyToPay += booksellerChosen.GetDeliveryCost();
                                if (booksOrdered.Count > 0)
                                {
                                    foreach (Book book in booksOrdered)
                                    {
                                        Console.WriteLine(book);
                                        Console.Write(new string('-', 80));
                                        moneyToPay += book.GetPrice();
                                    }
                                }
                                if (approvedBooksOrdered.Count > 0)
                                {
                                    foreach (ApprovedBook approvedBook in approvedBooksOrdered)
                                    {
                                        Console.WriteLine(approvedBook);
                                        Console.Write(new string('-', 80));
                                        moneyToPay += approvedBook.GetPrice();
                                    }
                                }
                                Console.WriteLine("Total price = " + moneyToPay + "(" + booksellerChosen.GetDeliveryCost() + " delivery)" + ".");
                                Console.WriteLine("Order accepted.");
                                Console.ReadLine();
                                break;
                            }
                        case 4: // Cancel delivery
                            {
                                booksOrdered.Clear();
                                approvedBooks.Clear();
                                Console.WriteLine("Delivery order canceled.");
                                Console.ReadLine();
                                break;
                            }
                        default: Console.WriteLine("Error."); break;
                    }
                } while (choice != 4 && choice != 3);
            }
        }

        private static ApprovedBook AddNewApprovedBook()
        {
            int choice;
            do
            {
                Console.WriteLine("Choose approved book.");
                for (int i = 0; i < approvedBooks.Count; i++)
                {
                    Console.WriteLine((i + 1) + ". " + approvedBooks[i].GetTitle() + ".");
                }
            } while (!(int.TryParse(Console.ReadLine(), out choice)) || choice < 1 || choice > approvedBooks.Count);
            return approvedBooks[choice - 1];
        }
        private static Book AddNewBook()
        {
            int choice;
            do
            {
                Console.WriteLine("Choose book.");
                for (int i = 0; i < books.Count; i++)
                {
                    Console.WriteLine((i + 1) + ". " + books[i].GetTitle() + ".");
                }
            } while (!(int.TryParse(Console.ReadLine(), out choice)) || choice < 1 || choice > books.Count);
            return books[choice - 1];
        }
        private static Bookseller ChooseBookseller()
        {
            int choice;
            do
            {
                Console.WriteLine("Choose bookseller.");
                for (int i = 0; i < booksellers.Count; i++)
                {
                    Console.WriteLine((i + 1) + ". " + booksellers[i].GetName() + ".");
                }
            } while (!(int.TryParse(Console.ReadLine(), out choice)) || choice < 1 || choice > booksellers.Count);
            return booksellers[choice - 1];
        }

        private static void ViewBooksellers()
        {
            if (booksellers.Count > 0)
            {
                foreach (Bookseller bookseller in booksellers)
                {
                    Console.Write(new string('-', 80));
                    Console.WriteLine(bookseller);
                }
            }
            else
            {
                Console.WriteLine("List is empty. Add new bookseller or load from file.");
            }
            Console.ReadKey();

        }
        private static void ViewApprovedBooks()
        {
            if (approvedBooks.Count > 0)
            {
                foreach (ApprovedBook approvedBook in approvedBooks)
                {
                    Console.Write(new string('-', 80));
                    Console.WriteLine(approvedBook);
                }
            }
            else
            {
                Console.WriteLine("List is empty. Add new approved book or load from file.");
            }
            Console.ReadLine();
        }
        private static void ViewBooks()
        {
            if (books.Count > 0)
            {
                foreach (Book book in books)
                {
                    Console.Write(new string('-', 80));
                    Console.WriteLine(book);
                }
            }
            else
            {
                Console.WriteLine("List is empty. Add new book or load from file.");
            }
            Console.ReadLine();
        }

        private static void SaveApprovedBooks()
        {
            StreamWriter writer = new StreamWriter("approvedbooks.txt");
            StreamWriter writerForAuthors = new StreamWriter("approvedauthors.txt");
            foreach (ApprovedBook approvedBook in approvedBooks)
            {
                writer.WriteLine(approvedBook.GetTitle());
                foreach (Author author in approvedBook.GetAuthors())
                {
                    if (author.GetFirstName() != null)
                    {
                        writerForAuthors.Write(author.GetFirstName() + " " + author.GetLastName() + ",");
                    }
                    else
                    {
                        writerForAuthors.Write(author.GetLastName() + ",");
                    }
                }
                writerForAuthors.WriteLine();

                writer.WriteLine(approvedBook.GetEdition());
                writer.WriteLine(approvedBook.GetISBN());
                DateTime dateToSave = approvedBook.GetPublishDate();
                writer.WriteLine(dateToSave.Day + " " + dateToSave.Month + " " + dateToSave.Year);
                dateToSave = approvedBook.getApproveDate();
                writer.WriteLine(dateToSave.Day + " " + dateToSave.Month + " " + dateToSave.Year);
                writer.WriteLine(approvedBook.GetPrice());
            }
            writerForAuthors.Close();
            writer.Close();
        }
        private static void SaveBooksellers()
        {
            StreamWriter writer = new StreamWriter("booksellers.txt");
            foreach (Bookseller bookseller in booksellers)
            {
                writer.WriteLine(bookseller.GetName());
                writer.WriteLine(bookseller.GetAddress());
                writer.WriteLine(bookseller.GetPhone());
                writer.WriteLine(bookseller.GetDeliveryCost());
            }
            writer.Close();
        }
        private static void SaveBooks()
        {
            StreamWriter writer = new StreamWriter("books.txt");
            StreamWriter writerForAuthors = new StreamWriter("authors.txt");
            foreach (Book book in books)
            {
                writer.WriteLine(book.GetTitle());
                foreach (Author author in book.GetAuthors())
                {
                    if (author.GetFirstName() != null)
                    {
                        writerForAuthors.Write(author.GetFirstName() + " " + author.GetLastName() + ",");
                    }
                    else
                    {
                        writerForAuthors.Write(author.GetLastName() + ",");
                    }
                }
                writerForAuthors.WriteLine();
                writer.WriteLine(book.GetEdition());
                writer.WriteLine(book.GetISBN());
                DateTime dateToSave = book.GetPublishDate();
                writer.WriteLine(dateToSave.Day + " " + dateToSave.Month + " " + dateToSave.Year);
                writer.WriteLine(book.GetPrice());
            }
            writerForAuthors.Close();
            writer.Close();
        }

        private static void AddBookseller()
        {
            Bookseller newBookseller = new Bookseller();
            booksellers.Add(newBookseller);
        }
        private static void AddApprovedBook()
        {
            ApprovedBook newApprovedBook = new ApprovedBook();
            approvedBooks.Add(newApprovedBook);
        }
        private static void AddBook()
        {
            Book newBook = new Book();
            books.Add(newBook);
        }

        private static void LoadApprovedBooks()
        {
            approvedBooks.Clear();
            StreamReader reader = new StreamReader("approvedbooks.txt");
            StreamReader readerForAuthors = new StreamReader("approvedauthors.txt");
            do
            {
                string titleRead = reader.ReadLine();
                // read authors
                string authorsRead = readerForAuthors.ReadLine();
                string[] authorNames = authorsRead.Split(',');
                List<Author> authors = new List<Author>();
                foreach (string author in authorNames)
                {
                    if (author == "")
                    {
                        continue;
                    }
                    else if (author.Contains(' '))
                    {
                        string[] twoNamed = author.Split(' ');
                        authors.Add(new Author(twoNamed[0], twoNamed[1]));
                    }
                    else
                    {
                        authors.Add(new Author(author));
                    }
                }

                int editionRead = 0;
                int.TryParse(reader.ReadLine(), out editionRead);
                string ISBNread = reader.ReadLine();
                string[] dateReadAsString = reader.ReadLine().Split(' ');
                DateTime dateRead = new DateTime(int.Parse(dateReadAsString[2]),
                    int.Parse(dateReadAsString[1]), int.Parse(dateReadAsString[0]));
                dateReadAsString = reader.ReadLine().Split(' ');
                DateTime approvedDateRead = new DateTime(int.Parse(dateReadAsString[2]),
                    int.Parse(dateReadAsString[1]), int.Parse(dateReadAsString[0]));
                decimal priceRead = 0.0M;
                decimal.TryParse(reader.ReadLine(), out priceRead);
                approvedBooks.Add(new ApprovedBook(titleRead, authors, editionRead, ISBNread, dateRead, priceRead, approvedDateRead));
            } while (!reader.EndOfStream);
            readerForAuthors.Close();
            reader.Close();
        }
        private static void LoadBooksellers()
        {
            booksellers.Clear();
            StreamReader reader = new StreamReader("booksellers.txt");
            do
            {
                string nameRead = reader.ReadLine();
                string addressRead = reader.ReadLine();
                string phoneRead = reader.ReadLine();
                decimal deliveryCostRead = 0;
                decimal.TryParse(reader.ReadLine(), out deliveryCostRead);
                booksellers.Add(new Bookseller(nameRead, addressRead, phoneRead, deliveryCostRead));
            } while (!reader.EndOfStream);
            reader.Close();
        }
        private static void LoadBooks()
        {
            books.Clear();
            StreamReader reader = new StreamReader("books.txt");
            StreamReader readerForAuthors = new StreamReader("authors.txt");
            do
            {
                string titleRead = reader.ReadLine();
                // read authors
                string authorsRead = readerForAuthors.ReadLine();
                string[] authorNames = authorsRead.Split(',');
                List<Author> authors = new List<Author>();
                foreach (string author in authorNames)
                {
                    if (author == "")
                    {
                        continue;
                    }
                    else if (author.Contains(' '))
                    {
                        string[] twoNamed = author.Split(' ');
                        authors.Add(new Author(twoNamed[0], twoNamed[1]));
                    }
                    else
                    {
                        authors.Add(new Author(author));
                    }
                }

                int editionRead = 0;
                int.TryParse(reader.ReadLine(), out editionRead);
                string ISBNread = reader.ReadLine();
                string[] dateReadAsString = reader.ReadLine().Split(' ');
                DateTime dateRead = new DateTime(int.Parse(dateReadAsString[2]),
                    int.Parse(dateReadAsString[1]), int.Parse(dateReadAsString[0]));
                decimal priceRead = 0;
                decimal.TryParse(reader.ReadLine(), out priceRead);
                books.Add(new Book(titleRead, authors, editionRead, ISBNread, dateRead, priceRead));
            } while (!reader.EndOfStream);
            readerForAuthors.Close();
            reader.Close();
        }
    }
}
